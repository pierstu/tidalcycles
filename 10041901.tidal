-- kindohm custom functions, cf yt tuts
let rip a b p = within (0.25, 0.75) (slow 2 . rev . stut 8 a b) p
let rip' a b c d e p = within (a, b) (slow 2 . rev . stut c d e) p

hush

xfadeIn 1 5 $
whenmod 15 11 (spread ($)[
(# squiz "{1 2 4 8}%2"),
superimpose (# fshift "<200 300 400 800>").(# fshiftnote "<3 1 2>").(every 2 (>| fshiftphase (fast 4 $ range 0.01 0.2 tri))),
(# krush (run 8)).(# kcutoff "<800 2000 3000 6000>"),
(superimpose (# distort (fast 4 $ range 0.1 0.9 isaw)).(every 2 (# ring (fast 3 $ range 0.1 0.4 tri)).(# ringf (fast 5 $ range 200 500 cosine)))),
superimpose (>| accelerate "<0.1 -0.2 -0.5 -1 -2>").(# cut "<0 1 -1 2>").(slow 2).(every 4 (# s "~"))
]) $
whenmod 16 12 (chunk 4 (hurry "<1.25 0.75>").(every 2 (density "<0.5 2 1 0.75 1.25>").(# fshift (range 100 300 saw)))) $
whenmod 4 3 (spread ($)[superimpose (slow 2).(# speed 0.5).(striate "<2 4 8 16>").(# cut 1),superimpose(slow 2).(iter 4).(every 2 (# krush "<2 4 8 10>").(# kcutoff "<800 2000 4000 10000>")), chunk 2 (spread ($)[(# fshift "<50 100 200 400 800>").(every 2(# fshiftnote "<1 2 3 4>")), (0.25 <~), (# squiz "<2 4 8 16>") ,(hurry 2)]),(# speed "0.5")]) $
foldEvery [13,17] (# coarse (run 2)).(jux (# fshift "<2000 1300 400 2800>").(# fshiftnote "<0.5 0.2 1 2>").(every 2 (# fshiftphase (fast 4 $ range 0.01 0.8 tri)))) $
foldEvery [6,11] (# cut "[0,1]").(superimpose (# distort (fast 4 $ range 0.1 0.9 isaw)).(every 2 (# ring (fast 3 $ range 0.1 0.4 tri)).(# ringf (fast 5 $ range 200 500 cosine)))) $
foldEvery[4,7] (density (every 2 (fast 2)$"0.5 2 4 2")).(fast "2 4 5 1") $
foldEvery [3,5] (# delay (every 2 (fast 2) $ range 1.7 0.8 tri)).(# delaytime "<0.05 0.01 0.02 0.015>").(# delayfeedback (every 2 (fast 2) $ "<0.8 0.6 0.5 0.2>")).(# cut 1) $
every 2 (rip "<0.0125 0.06125 0.09625>" "<0.0125 -0.01 0.05 0.0625>") $
every 4 (rip' 0 0.5 "<4 2 3>" "<0.25 0.125 0.33>" "<0.125 -0.1 0.0625>").(0.25 <~) $
every 8 (# s "~").(# cut 0).(slow 4) $
s "[<hold:2 if:2>(<5 3.5 3 2 1 0>,8), claps(<3 2 1>,8,<2 4>)]"
# speed 0.5

d1 $ every 2 (juxBy 0.8(density "2 4 8").(# accelerate 12)) $ s "grk:2*4" # shape 0.9

xfadeIn 1 8 $ silence

hush

d1 $ silence

xfadeIn 1 8 $
every 17 (rip "<0.25 0.125 0.0625>" "<0.125 -0.1 0.0625>") $
every 10 (rip' 0 0.5 "<4 2 3>" "<0.25 0.125 0.33>" "<0.125 -0.1 0.0625>") $
 whenmod 15 11 (spread ($)[
  -- (# squiz "{1 2 4 8}%2"),
  -- superimpose (# fshift "<200 300 400 800>").(# fshiftnote "<3 1 2>").(every 2 (# fshiftphase (fast 4 $ range 0.01 0.2 tri))),
  (# krush (run 8)).(# kcutoff "<800 2000 3000 6000>"),
  (superimpose (# distort (fast 4 $ range 0.1 0.9 isaw)).(every 2 (# ring (fast 3 $ range 0.1 0.4 tri)).(# ringf (fast 5 $ range 200 500 cosine)))),
  superimpose (# accelerate "<0.1 -0.2 -0.5 -1 -2>").(# cut "<0 1 -1 2>").(slow 2).(every 4 (# s "~"))
])
 $ seqPLoop [
(0,14, stack [
  whenmod 8 6 (# s "~") $
  whenmod 4 2 (stut' "<8 4>" "<-0.125 0.25 0.125>" (spread ($)[(|* accelerate "<1.05 0.95>"),(|* speed "<1 2 0.5>")]).(every 2 (spread ($)[(# distort (range 0.2 0.8 tri)), (# squiz "<1 2 8>"), (# triode (range 0.2 0.8 tri)) , (# krush "<1 2 4 8>").(# kcutoff (range 300 6000 tri))]))) $
     every 4 (spread ($)[zoom (0.25,0.5),iter 4, ply "<2 3 0.5>", (trunc (1/2))]) $
     every 3 (+| accelerate "-0.25 -0.5") $
     every 2 (spread ($)[every 4(rev),(*| speed "-1")]) $
     every 2 (slowspread ($)[(-| cut "3"),superimpose (slow 2).(density 2),(fast 2),(# cut 1)]) $
     seqPLoop [
      (0,3, s "[tc*<1 2 > grcm*<1 2 4>, ifdrums*<1 1/2> pp*<1 2 1/2>] " # cut 300),
      -- (4,7, s "[tc*<1 2> grcm*<4 2 1>, ifdrums*<1 2 4> pp*<2 4>] " # cut "<2 200 303>"),
      (8,12, sometimes(density 2) $ s "[tc*2 grcm*4, ifdrums*<2 1 4> pp*<2 4>] ")]
     # n (every 2 (palindrome) $ "9 12 10 7 1 1")
     |<| cut "2 4",
  whenmod 10 8 (spread ($)[(superimpose (# octer (fast 2 $ range 0.5 1 tri)).(# octersub (fast 3 $ range 0.3 0.7 isaw)).(# octersubsub (fast 5 $ range 0.3 0.8 saw)))
      , (superimpose (|+ krush "2 4 1 6").(# kcutoff (fast 4 $ range 30 4000 isaw)))
      ]) $
      whenmod 8 4 (slowspread ($)[(# vowel "{a e o i}%2"),(# distort (fast 2 $ range 0.2 1 saw)), (superimpose (# triode (fast 2 $ range 0.3 0.9 tri)).(# ring (fast 4 $ range 0.2 1.6 tri)).(# ringf (fast 6 $ range 200 1800 isaw)))]) $
      every 4 (juxBy 0.4 (#triode (fast 4 $ range 0.1 0.9 tri)).(every 2 (|*| speed "-1"))) $
      every 3 (trunc (1/2)) $
      s "<xk*2 ~> ugkick*4 [~ xh*<1 2 4>][~ brop*1] "
      # n (every 2 (rev) $ "12 6")
      # cut "1 -1 2 1? 3 3 1? -1 -3",
    whenmod 8 6 (chunk 4 (hurry "<1.25 0.75>").(every 2 (density "<0.5 2 1 0.75 1.25>").(# fshift (range 100 300 saw)))) $
      whenmod 4 3 (spread ($)[superimpose (slow 2).(|* speed 0.5).(striate "<2 4 8 16>").(# cut 1),superimpose(slow 2).(iter 4).(every 2 (# krush "<2 4 8 10>").(# kcutoff "<800 2000 4000 10000>")), chunk 2 (spread ($)[(# fshift "<50 100 200 400 800>").(every 2(# fshiftnote "<1 2 3 4>")), (0.5 <~), (# squiz "<2 4 8 16>") ,(hurry 2)]),(# speed "0.5")]) $
      whenmod 5 3 (+| coarse "2") $
        seqPLoop [
          (0,8, every 2 (# octer 1).(# octersubsub (fast 4 $ range 0 1 saw)).(every 2 (# octersub "<0.5 0.8>")) $ s "[grh(<3.5 3 5>,8,<0 2 5>),[~ <pl bs>*<1 2 4>] future*1, [~ foleyperc*2] clic*4]") ,
          (9,12, every 2 (# octer 1).(# octersubsub (fast 4 $ range 0 1 saw)).(every 2 (# octersub "<0.5 0.8>")) $ s "[grh(<3.5 7 5>,<8 16>,<0 2 5>),[~ <pl bs>*<2 4>] future*<1 2 4>, [~ foleyperc*<4 2>] clic*<8 4>]")
          ]
      # n (every 4 (density 2) $ every 3 (density 0.5) $ every 2 (palindrome) $ slow 2 $ "12 3 11 9 5 9 1 10 12 8 5")
      # cut "-1" ,
      whenmod 6 4 (0.5 ~>) $
      every 4 (palindrome) $
      every 5 (|* speed "0.5") $
      every 4 (+| accelerate "-0.5 -1") $ seqPLoop [
      (0,8, s "~") ,
      (9,15, slow 2  $ s "brok*2 xs*8 v5*2 bbss*2 " # gain (fast 2 $ range 0 0.7 saw) # shape (range 0 0.5 saw))
      ]
      # n (every 1 (slow 4) $ every 3 (slow 1.5) $ every 3 (palindrome) $ every 3 (0.25 <~) $ run 10)
      # cut "-1 4 3 4 -1"
          ]),
    (3,15, every 8 (striate "<4 8 16>") $
      every 5 (|+ delaytime "0.2") $
      every 4 (0.25 ~>) $
      -- whenmod 4 2 (spread ($)[(juxBy 0.4(zoom (0.25,0.75)).(density 2)),iter 4,(juxBy 0.6 (fast 2).(# accelerate "-1"))]) $
      -- every 2 (((|+| delay "0.6") . (|> delaytime "0.2 0.12") . (<| delayfeedback "<0.95 0.15 0.35 0.9>") . (# cut "<-1 1>"))) $
      -- whenmod 16 10 (|- n (every 3 (rev) $ every 1 (0.25 ~>) $ "12 8 10")) $
      -- whenmod 6 4 (|* speed "<-1.05 -0.95 1.05 0.95>") $
      sometimes (slow 2) $ seqPLoop [
        (0,5,
          seqPLoop [
          (0,2, every 4 (# s "~") $ s " [temph:12*2 grh:12*4, pl:12*2 ~]" # cut "<1 2 3>"),
           -- (3,4, every 3 (# s "~") $ s " [temph:8*4 grh:8*2, ~ pl:8*4 ]" |+| cut "<-1 2 1>"),
           (3,5, every 2 (# s "~") $ s " [temph:10*2 grh:10*4, <~ pl:12*4 pl:8*2> <pl:10*2 ~>]" # cut "1")
           ]
          # cut "<1 -1>"
          # speed "0.5 0.75"
          every 2 (spread ($)[density 2, hurry 2, chunk 4(hurry 2), (fast 2)]) $
          # unit "c s"),
        (5,9, whenmod 8 4 (spread ($)[gap 16, striate "<2 4 8 16>", smash 32 [2,3,4], (chop 8)]) $
          -- every 4 (0.5 <~) $
          -- every 3 (slow 2) $
          every 2 (spread ($)[(# triode (fast 2 $ range 0.2 0.8 isaw)),(# distort (range 0.1 0.9 tri))]) $
          s " b*8 grsn*8 626*2 "
          # n (every 2 (0.25 ~>) $ run 7)
          # lpf (range 80 2000 tri)
          # shape (fast 2 $ range 0.05 0.2 saw)
          # gain (range 0.6 0.75 tri)
          # cut "<1 -1 2>"),
        (10,15, whenmod 6 3 (density 4) $
          whenmod 5 3 (|* speed "-1") $
          every 4 (jux (rev)) $
          every 2 (((# delay "0.2 0.1 0.3") . (# delaytime "0.01") . (# delayfeedback "0.7"))) $
          slow 2 $ s "xk*4 bottle*2 impacts*4 hoover*2 "
          # n (every 4 (slow 4) $ every 1 (palindrome) $ "1 7 4 9")
          # cut "2 -2 2 -2")
      ]
        ),
        (5,14,
          whenmod 7 4 (density 4).(spread ($)[(# distort (range 0.2 0.7 sine)),(>| distort (range 0 0.6 cosine))]).(spread ($)[(# cut "<0 1>"),(# cut 1)]).(|*| gain (range 0.5 0.75 tri)) $
          whenmod 4 3 (# triode (fast 2 $ range 0 0.7 isaw)) $
              whenmod 3 2 (|* speed "-1") $
              every 2 (((# delay "0.2 0.1 0.3") . (# delaytime "0.01") . (# delayfeedback "0.7"))) $
              slow 4 $ s "bbss*4 <crow birds3>*2 <nice bass2 stab>*4 hoover*2 "
              # n (every 4 (slow 4) $ every 1 (palindrome) $ "1 7 4 9")
              # cut "2 -2 1 2"
    )


    d2 $ every 2 (densi(spread ($)[hurry 0.5, ply 2, slow 2, ty 2) $ s "])tc*<8 4 16 32>" # cut 1 # speed "1 2 0.75 1.25"
]

clutchIn 2 4 $
  whenmod 8 6 (jux (rev)) $
  every 6 ((slow 4 . striate 64)) $
  every 4 (stut' 3 (0.0625) (|*| speed "1.5")) $
  whenmod 16 13 (jux (rev)) $
  every 2 (slow 2) $ stack [
  sometimesBy (1/3) (slow 2) $ s "grh*<4 8 2>" # cut "<2 -1 1>" # speed "<0.5 2 1 1.25 0.75>" ,
  s "percs*4 ugslam*8 broh*1 grk*2 "
  ]
  # n (every 2 (rev) $ run 8)
  # cut "1"
  # speed 0.25
  -- # cps (slow 10 $ range 0.35 1 sine)


xfadeIn 1 16 $ silence

xfadeIn 1 8 $
every 2 (spread ($)[density 4, hurry 4, chunk 4(hurry 2), (jux(fast 2).(density 2))]) $
whenmod 8 6 (>| speed "0.25 0.75 0.5 0.35").(>| cut 0) $
seqPLoop [
(0, 5, whenmod 7 5 (spread ($)[(#distort (range 0.2 0.7 tri)).(every 2 (# ring (fast 2 $ range 0.1 0.6 tri)).(# ringf (range 30 200 cosine))), (juxBy 0.35 (# krush (range 0 1 tri)).(# kcutoff (fast 3 $ range 30 6000 tri)).(every 2 (# fshift (fast 8 $ range 0.1 0.4 cosine)).(# fshiftnote "<1 0.3 0.4 -0.1 -2>"))), (# fshift (range 7000 30 tri)).(# fshiftnote (range 0.2 2 tri)), (# octer (range 0.2 2 tri)).(# octersub (range 2 0.2 tri))]) $
  whenmod 4 3 (spread ($)[(# squiz "<2 4 8 16 32>"), (# triode (range 0.1 0.8 tri))]) $
  every 2 (slow 2) $ s "[clic*8 ~, [tempk*2 [~ tc]] <tempp tcp>*8 ]"
  # n (every 3 (rev) $ every 2 (0.25 <~) $ "1 9 0 11")
  # cut "1 -1" ),
(3, 6, whenmod 7 6 (spread ($)[(# s "~"),(spin 3)]) $
   whenmod 3 4 ((slow 8 . striate 64)) $
   whenmod 7 5 (# shape "0.2 0.5") $
   every 4 (((# delay "0.5 0.3 0.6") . (# delaytime "0.1") . (# delayfeedback "0.5"))) $
   every 3 (# up "12") $
   every 2 (spread ($)[hurry 2,ply 2,density 2,(fast 2)]) $ s "[<tempk brok tk ugkick>*2 <broh ughat>*2, <broh tc>*2 temps*4 ] "
   # n (every 4 (rev) $ run 9)
   # cut "-1") ,
  (6,7, s "~"),
  (8,13, whenmod 7 6 (spread ($)[(# s "~"),(spin 3)]) $
  whenmod 3 4 ((slow 8 . striate 64)) $
  whenmod 7 5 (# shape "0.2 0.5") $
  every 4 (((# delay "0.5 0.3 0.6") . (# delaytime "0.1") . (# delayfeedback "0.5"))) $
  every 3 (# up "12") $
  every 2 (spread ($)[chunk 2(hurry 2),zoom (0.25,0.75).(ply 2),chunk 4(density 2),(fast 2)]) $ s "[<tempk brok tk ugkick>*2 <broh ughat>*2, <broh tc>*2 ts*4 ] "
  # n (every 4 (rev) $ run 9)
  # cut "-1") ,
  (14,15, s "~")
]


-- # cps 0.25

setcps 0.35


d2 $ every 2 (spread ($)[hurry 0.5, ply 2, slow 2, (density 2)]) $ s "tc*<8 4 16 32>" # cut 1 # speed "1 2 0.75 1.25"

xfadeIn 1 4 $
slow 2 $
stack [
every 8 (striate 8) $
   every 5 (|> shape "0.2") $
   every 4 (0.25 ~>) $
   every 3 (trunc (4/8)) $
   every 2 (((|+| delay "0.6") . (|> delaytime "0.2 0.12") . (<| delayfeedback "<0.95 0.15 0.35 0.9>"))) $
   whenmod 16 10 (|- n (every 3 (rev) $ every 1 (0.25 ~>) $ "12 8 10")) $
   whenmod 6 4 (*| speed "<-1.05 -0.95 1.05 0.95>") $
   every 2 (slow 2) $
   seqPLoop [
   (0,8, s " [temph:12*2 grh:12*4, pl:12*2 ~]"),
   (8,12, s " [temph:8*4 grh:8*2, ~ pl:8*4 ]"),
   (13,15, s " [temph:10*2 grh:10*4, [~ pl:10*2] ~]")
   ]
   # cut "<1 -1>"
   # speed "0.5 0.75"
   # unit "c s",
whenmod 7 4 (density 4).(spread ($)[(# distort (range 0.2 0.7 sine)),(>| distort (range 0 0.6 cosine))]).(spread ($)[(# cut "<0 1>"),(# cut 1)]).(|*| gain (range 0.5 0.75 tri)) $
   whenmod 4 3 (# triode (fast "<1 2>" $ range 0 0.7 isaw)) $
       whenmod 3 2 (|* speed "-1") $
       every 2 (((# delay "<0.2 0.1 0.3>") . (# delaytime "<0.01 0.05 0.1 0.0625>") . (# delayfeedback "<0.7 0.4 0.6 0.5 0.8>")) . (slow 2) . (every 2 (spread ($) [chunk 4 ((hurry 2).(# cut "0 1")) ,(hurry 0.5)]))) $
       slow 4 $ s "xk*4 bottle*2 impacts*4 ~*2 "
       # n (every 4 (slow 4) $ every 2 (palindrome) $ "1 7 4 9")
       # cut "2 -2 1 2"
   ]

hush

d2 $ silence

clutchIn 2 4 $
every 4 (0.25 <~) $
every 2(|+ coarse "12 32").(|-| cut 1) $
whenmod 7 4 (# shape "0.4 0.2 0.5") $
   stack [
    whenmod 5 3 (|> distort (range 0.2 0.5 tri)) $
    whenmod 4 2 (( (every 2 (# attack "<0.01 0.005 0.05 0>")).(# speed (fast 2 $ every 3 (rev) $ "1 -1 0.5 -0.5 -0.75 -1.125 -1.25")).(# cut "<-1 1 2 0 1>") . (# delay "0.3") . (# delaytime (fast 2 $ every 2 (rev) $ "<0.001 0.05 0.3 0.0125>")) . (# delayfeedback (fast 2 $ "<0.8 0.9 0.95 0.8>")) . (every 2 (>| triode (range 0.2 0.6 tri))) )) $
      -- whenmod 16 12 (0.25 <~) $
      whenmod 8 6 (chop 16) $
      whenmod 4 3 (striate 64) $
      every 2 (0.25 <~) $
      every 3 (slow 2) $ s " tp*1 tc*4 b*2 ~"
      |+| n (every 1 (0.25 <~) $ "1")
      *| cut "4 3 4 1",
    every 2 (gap 8) $
      every 5 (palindrome) $
      slow 2 $ s "r2*2 grk*2 tempk*4 tn*2 "
      # n (every 2 (0.25 ~>) $ every 3 (rev) $ run 4)
      # cut "3"
      ]

 xfadeIn 2 4 $ silence

xfadeIn 1 4 $
 seqPLoop [
 (0,6,stack [
  whenmod 6 4 (every 2(juxBy 0.2 (# begin (fast 6 $ "<0.05 0.05 0.01>")).(# end (fast 3 $ "<0.1 0.15 0.2>")).(# loop (fast 4 $ "<16 24 32 12>")).(# cut (fast 2 $ "<1 2 3 0>")))) $
    whenmod 5 4 (chop 4) $
    whenmod 4 3 (density 2) $
    whenmod 3 2 (spread ($)[(*| cut "<2 1 -1>"), (|* cut "<2 1 -1>")]) $
    every 2(spread ($)[(|+ triode (every 2 (slow 2) $ every 2 (0.25 ~>) $ "0.4 0.1 0.2 0.6 0.4 0.6 0.8 0.25")),(+| distort (every 2 (slow 4) $ every 2 (0.25 ~>) $ "0.1 0.2 0.15 0.25 0.4 0.15 0.45 0.8 0.43 0.25" ))]) $
    slow "<1 2>" $ s "[tk*8 tp*2, ~ <tp tc tn tf>*2 ps*2 <tcp tc>*4 ]"
    # n (every 4 (rev) $ every 2 (0.25 <~) $ "1 2 4 8")
    # cut "-1"
    |/| speed (every 2 (rev) $ every 4 (0.125 <~) $ "0.95 1.05 0.75 1.15 1.25 0.89 0.96 1.04")
]) ,
 (7,14,stack [
  -- whenmod 16 12 (0.125 <~) $
  whenmod 6 4 (every 2(juxBy 0.2 (# begin (fast 6 $ "<0.05 0.05 0.01>")).(# end (fast 3 $ "<0.1 0.15 0.2>")).(# loop (fast 4 $ "<16 24 32 12>")).(# cut (fast 2 $ "<1 2 3 0>")))) $
    whenmod 5 4 (chop 4) $
    whenmod 4 3 (density 2) $
    whenmod 3 2 (spread ($)[(*| cut "<2 -2 0 1>"), (|* cut "<2 -2 -1>")]) $
    every 2(spread ($)[(|+ triode (every 2 (slow 2) $ every 2 (0.25 ~>) $ "0.4 0.1 0.2 0.6 0.4 0.6 0.8 0.25")),(+| distort (every 2 (slow 4) $ every 2 (0.25 ~>) $ "0.1 0.2 0.15 0.25 0.4 0.15 0.45 0.8 0.43 0.25" ))]) $
    every "<2 4>" (fast 2) $ s "<~  meca*<1 2 4>> " # n (every 3 (slow 2) $ every 4 (0.125 ~>) $ "0 1 2 1 0 1 2 1 2 1 2 0 1 2 1 2"),
  whenmod 6 5 (|*| speed (range 0.5 1.25 tri)).(slow 2).(striate 64) $
    whenmod 5 4 (0.25 ~>) $
    whenmod 4 3 (spread ($) [(# ring (range 0.1 0.4 tri)).(# ringf (fast 2 $ range 200 4000 saw)).(# triode (fast 3 $ range 0.1 0.3 tri)) ,(every 2(# fshift (("0.2 0.4 0.3") * (sine * 0.5) * 2)).(# fshiftnote (range 0 2 tri)))]) $
    whenmod 3 2 (|* speed "-1") $
    slow "<1 2>" $ s "[tk*8 tp*2, ~ <tp tc tn tf>*2 ps*2 <tcp tc>*4 ]"
    # n (every 4 (rev) $ every 2 (0.25 <~) $ "1 2 4 8")
    # cut "-1"
    |/| speed (every 2 (rev) $ every 4 (0.125 <~) $ "0.95 1.05 0.75 1.15 1.25 0.89 0.96 1.04")
]),
(14,15, s "~") ,
(16, 22, stack [
  every 4 (+| fshift ( every 2 (slow 2) $ range 3 400 sine)).(|+ fshiftnote "<1 2 0.4 3>")$
      every 3 (# ring (range 0 0.5 cosine)).(# ringf (fast 2 $ range 200 4000 tri)) $
      every 2 (slow 2) $ s "[tk*2 <amencutup*8 ~>, rave2*4 ~ ]"
      # n (every 4 (rev) $ "7 5 7 5 5 6 11")
      # cut "<3 -1 2>" ,
  whenmod 6 4 (every 2(juxBy 0.2 (# begin (fast 6 $ "<0.05 0.05 0.01>")).(# end (fast 3 $ "<0.1 0.15 0.2>")).(# loop (fast 4 $ "<16 24 32 12>")).(# cut (fast 2 $ "<1 2 3 0>")))) $
      whenmod 5 4 (chop 4) $
      whenmod 4 3 (density 2) $
      whenmod 3 2 (spread ($)[(*| cut "2 2 2"), (|* cut "2 2 2")]) $
      every 2(spread ($)[(|+ triode (every 2 (slow 2) $ every 2 (0.25 ~>) $ "0.4 0.1 0.2 0.6 0.4 0.6 0.8 0.25")),(+| distort (every 2 (slow 4) $ every 2 (0.25 ~>) $ "0.1 0.2 0.15 0.25 0.4 0.15 0.45 0.8 0.43 0.25" ))]) $
      every "<2 4>" (fast 2) $ s "<~  meca*<1 2 4>> " # n (every 3 (slow 2) $ every 4 (0.125 ~>) $ "0 1 2 1 0 1 2 1 2 1 2 0 1 2 1 2"),
  whenmod 6 5 (|*| speed (range 0.5 1.25 tri)).(slow 2).(striate 64) $
      whenmod 5 4 (0.25 ~>) $
      whenmod 4 3 (spread ($) [(# ring (range 0.1 0.4 tri)).(# ringf (fast 2 $ range 200 4000 saw)).(# triode (fast 3 $ range 0.1 0.3 tri)) ,(every 2(# fshift (("0.2 0.4 0.3") * (sine * 0.5) * 2)).(# fshiftnote (range 0 2 tri)))]) $
      whenmod 3 2 (|* speed "-1") $
      slow "<1 2>" $ s "[tk*8 tp*2, ~ <tp tc tn tf>*2 ps*2 <tcp tc>*4 ]"
      # n (every 4 (rev) $ every 2 (0.25 <~) $ "1 2 4 8")
      # cut "-1"
      |/| speed (every 2 (rev) $ every 4 (0.125 <~) $ "0.95 1.05 0.75 1.15 1.25 0.89 0.96 1.04")
    ] ) ,
  (22,23, s "~")
]

do
clutchIn 1 8 $ silence
xfadeIn 2 16 $ silence

d1 $ silence

xfadeIn 2 4 $
whenmod 8 6 (superimpose (every 2 (# octer (range 0.2 3.8 cosine)).(# octersub (range 1.2 0.75 tri))).(every 3(|+ ring (every 2 (fast 3) $ range 0.1 0.4 tri)).(|- ringf (every 2 (fast 2) $ range 2000 300 saw))).(# delay (every 3 (fast 2) $ "<0.5 0.7 0.3>")).(# delaytime (every 2 (fast 2) $ "<0.03 0.045 0.075 0.01>")).(# delayfeedback "<0.3 0.7 0.6>").(every 2 (|+| cut 1)).(# krush (slow 2 $ range 0 3 isaw)).(# kcutoff (range 200 6000 saw))) $
whenmod 6 5 (|+ coarse "8 4 2") $
seqPLoop [
(0,3, stack [
  every 4 (slow 2) $ s "[tk(<3 3.5 5?>,8,<0 2 4>),[~ ts*2]]" ,
  every 4 (slow 2).(# ring (range 0.1 0.4 cosine)).(# ringf (every 2 (fast 2) $ range 40 4000 tri)).(|> up (scan "12")).(# coarse (every 3 (fast 2) $ "10 8 6 12 14 16 10 8")) $
    s " [grprc*<8 4 2>,~ tcp*<1 2 4>] "
    # n (every 4 (slow 3) $ every 2 (density 2) $ run 2)
    ]
# cut "-1"),
(4,7,
  every 2 (fast 2) $ stack [
  every 4 (slow 2) $ every 2 (fast 2) $ s "[tk(<3 5>,8),[<~ grh*2> ts*2]]",
  every 4 (slow 2).(# ring (range 0.1 0.4 cosine)).(# ringf (every 2 (fast 2) $ range 40 4000 tri)).(# up (scan "12")).(|> coarse (every 3 (fast 2) $ "10 8 6 12 14 16 10 8")) $
  s " [grprc*<8 4 2>,[<tc*2 ~> tc*<2 4 1>] tcp*<2 4>] "
  # n (every 4 (slow "<0.5 2>") $ every 2 (fast 2) $ run "<2 4>")
  ]
) ]


xfadeIn 1 8 $
seqPLoop [
(0,3, whenmod 7 4 (# ring (range 0.1 0.4 sine)).(# ringf (range 30 400 cosine)) $
whenmod 4 2 (every 2 (stut' "<3 4>" "<-0.0625/2 0.0625 0.125? -0.1 0>" (|* speed "<0.75 1.25>"))).(spread ($)[(# triode (range 0.2 0.7 cosine)),(# waveloss "<4 8 32>"),(# fshift (range 0.1 2 tri)).(# fshiftnote (range 0.6 2 tri)),(# squiz "<2 4 8 24>")]) $
every 4 (density 2) $ slow 2 $ s "[tp(<7 5.5>,<16 8> ) claps(<2 4 3>,<8 16>,<0 3>), donk(<2 4 3>,<8 16>) tc(<2 4>,8) ]"
# n (every 3 (density 1.5) $ run 11)
-- # cut "<1 4 -1 2>"
),
(4,7,whenmod 7 4 (# ring (range 0.2 0.5 sine)).(# ringf (range 30 400 cosine)) $
whenmod 4 2 (every 2 (stut' "<2 4>" "<0.0625/2 0.0625 0.125 -0.1>" (|* speed "<0.85 1.15>"))).(spread ($)[(# triode (range 0.3 0.8 cosine)),(# waveloss "<16 4 32>"),(# fshift (range 0.4 1.5 tri)).(# fshiftnote (range 2.6 1.5 tri)),(# squiz "<32 16 8 24>")]) $
every 2 (density 2) $ slow 2 $ s "[tp(<9 7>,<16 32> ) claps(< 2 3.5 3>,<4 8>,<1 3>), donk(<5 2.5 3>,<8 16>) tc(<1.5 3.5>,8) ]"
# n (every 3 (density 1.5) $ run 11)
-- # cut "<1 4 -1 2>"
)
]

hush


d2 $
stack [
whenmod 7 5 (0.125 <~) $
every 4 (trunc (3/8)) $
every 2 (# speed "0.5") $
every 2 (slow 2) $ stack  [
slow 4 $ note "1 2 3 4 5 6 7 18" # s "white" # cut 1 # attack "1 2 3 4", 
s "[ if*<2 4> hold*<2 4>, clic*<2 4 1> hits*<2 1 4> ]"]
# n (every 4 (0.25 ~>) $ every 2 (slow 1.5) $ "3 5")
# cut "1 2 3 4 2"
]
# gain 0.8
