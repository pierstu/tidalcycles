
   hush
   xfadeIn 1 32 $


do
 d1 $
   whenmod 11 8 (# fshift (segment 16 $ slow 2 $ range 300 1200 saw)).(every 2 (# fshiftnote (range 0.5 2 saw))) $
   whenmod 18 15 (stut' 3 (0.0625*2) (spread ($)[(# krush 1).(# kcutoff (segment 16 $ range 160 3000 saw)),(# accelerate "1.5")])) $
   whenmod 5 2 (# ring (range 0.4 0.6 tri)).(# ringf (range 20 300 cosine)) $
      whenmod 5 4 (# speed "-1") $
      every 3 (|* speed "<10 7 15 4>") $
      whenmod 6 3 (every 2 (zoom (0.25,0.75))).(chunk 4 (hurry 2)) $
      -- whenmod 15 12 (# s "~") $
      every 4 (0.25 <~) $
      every 4 (spread ($) [(density 2).(spread ($)[slow 2, (fast 2)]), (# s "~").(slow 2)]) $
      every 2 (spread ($) [density 2,(slow 2)]) $
      whenmod 8 6 ((every 2(# triode (range 0.1 0.3 isaw))).(|*| gain 0.85).(jux (+| delay "0.1 0.5 0.4 0.6") . (# delaytime "0.1 0.05") . (# delayfeedback "0.3 0.1 0.1"))) $
      seqPLoop [
        (0,7,slow 2 $
          every 2 (# coarse "12 4") $
          s "tk*1 glasstap*8 ugsnare*1 tc*<2 4> "
          # n (every 2 (0.25 <~) $ run 9)) ,
        (8,15,every 2 (slow 2) $
          whenmod 5 2 (density 2).(every 4 (#cut 1)).(every 2(slowspread ($)[(juxBy 0.4(# ring (range 0.1 0.4 tri)).(# ringf (range 300 1200 saw))),(# octer (range 0.5 3 isaw)).(every 2(# octersub (range 3 6 tri))),(# squiz "<2 4 8>"),(# speed (range 1 3 tri))])) $
          stack [
            s "[tk*<1 2 4> glasstap*8, ~ <ugsnare tempt bs>*<1 2 4> ]" # n (every 2 (0.25 <~) $ run 9) ,
            every 4 (fast 4) $ s " tc:1*<2 4 8> " # n (every 2 (density 2) $ scan 3) |+ speed 2
          ]
        )
        ]
        # speed 0.75
        # cut "2"


clutchIn 1 8 $ s "<grh ~>*<8 16>"


hush


clutchIn 2 8 $ silence

do
  d1 $
      whenmod 7 5 (stut' "<4 6 8>" (0.125) (slowspread ($)[(# krush (segment 8 $ range 0.3 3 tri)).(# kcutoff (range 6000 300 tri)),(# ring (segment 4 $ range 0.2 0.5 tri)).(# ringf (range 300 6000 tri)),(|*| accelerate "<0.75 1.25 0.85 1.15 1.5>")])).(# cut "<-1 1 3 6 303>") $
      every 8 (# triode "0.3 0.5") $
      every 4 (0.25 <~) $
      whenmod 5 3 (slowspread ($)[(slice 8 "1 7 5 2 3 6 4 0").(every 2 (stutWith 4 "0.125 -0.125" (|* speed 1.25))), chop "<16 128 32>",(slowspread ($)[stripe 3, iter' 4, slowstripe 3, (iter 4)]),(chunk 4 (hurry 0.5)).(every 2 (spread ($)[ply "<2 3>", (stripe 3)]))]) $
      whenmod 7 5 (# fshiftnote "0 0 0.5 0.75 0.35").(# fshift (range 20 300 tri)) $
      seqPLoop [
      (0,6, slow 2 $ s "vk*1 tc*<2 4> tcp*<4 8> bs*1 "
        # n (every 2 (slow 2) $ "8 9 10")),
      (6,7, s "~") ,
      (8,14,
        whenmod 12 9 (every 2 (# s "~").(slowspread ($)[
        (every 2 (# leslie (range 0.3 0.9 tri)).(# lrate (range 0.6 4 saw)).(# lsize (range 0.8 2.5 isaw))).(# fshift (range 0.4 0.1 tri)).(# fshiftnote "<1 2 3 5 0.75>")
        ,(every 2 (# vowel "{a e i o u}%32")).(chunk 4 (hurry 2)),(every 2 (# coarse (run 16))).(# room "<1.3 2.4 3.8 0.1>").(# size "2.1 0.4 0.8 1.2").(# cut 1)
        ,(every 2 (# octer "0.2 0.9").(# octersub (range 0.2 4 tri)).(# octersubsub (range 0.4 1.3 isaw)))
        ,(ply "<2 3>")
        ])) $
        every 2 (slow 2) $ s "vk*<1 2 4> tc*<2 4> tcp*8 bs*<1 2> "
      # n (every 4 (slow 2) $ "8 9 10")) ,
      (14,15, s "~")
      ]

      d1 $ silence

clutchIn 1 8 $
      whenmod 15 13 (slowspread ($) [(#leslie 0.8).(# lrate 0.7).(# lsize 3),(# accelerate "<0.1 0.2 0.4 -1 -2>"), chunk 2 (hurry 2), iter 2, (# s "~")]) $
      whenmod 8 12 (spread ($) [ chunk 4 (hurry 2), iter 4, chunk 4 (hurry 2), (#  accelerate "< 0.3 0.4 -1 -2>")]) $
      whenmod 7 5 (slowspread ($) [density 2, (density 2).(# speed 2), chunk 4 (hurry 2), fast 2, (# s "~")]) $
      whenmod 6 4 (spread ($)[hurry 0.5,(slow 2)]) $
      whenmod 7 5 (slowspread ($)[(# fshift (range 0.4 0.8 sine)).(# fshiftnote (slow 2 $ range 0.5 1 cosine)),(# ring (range 0.3 0.9 isaw)).(# ring (range 150 3000 cosine)),(# accelerate "-1 0.5 1")]).(spread ($)[chunk 4(hurry 2), ply "<2 3 4>",(iter 2)]). (every 2 (# delay "0.1") . (# delaytime "0.001") . (# delayfeedback "0.2 0.8")) $
      every 4 (0.25 <~) $
      every 2 (fast 2) $
       stack [
        s "grh(<1 2 4>,<4 8>)",
        every 4 (# s "~") $ s "hats*<2 4 8 1>" # gain (slow 4 $ range 0 0.7 saw) ,
        s "~ ugsnare*<1 2>"  # cut 3,
        s "grk:8*<4 1 2> ~" # cut "-1"
       ]
       -- # n (every 2 (0.25 ~>) $ every 3 (slow 2) $ every 4 (density 2) $ run 11)


d1 $ silence

       xfadeIn 1 8 $

d1 $
        whenmod 5 3 (# up "-2 3") $
        whenmod 6 5 (chop 16) $
        every 5 (# accelerate "-0.5") $
         seqPLoop [
             (0,3, whenmod 6 4 (degrade) $
               whenmod 5 3 (# shape "0.1 0.2 0.3 0.4 0.2 0.1 0.4 0.3") $
               every 6 (# speed "-1") $
               every 2 (slow 2) $ s "hold*4 tp*1 grcm*2 626*2 "
               # n (every 4 (rev) $ every 4 (0.25 ~>) $ every 1 (rev) $ "4 1 1 10 10 5 4")
               |-| up (every 4 (rev) $ "9 11 4 1 11 6 5 0 0 1 12 0 6 2")
               ) ,
             (4,7,  whenmod 6 4 (# speed "-1") $
               every 6 (density 1.5) $
               whenmod 7 4 (0.5 ~>) $
               slow 2 $ s "vk*8 moto*1 <pp psr bs>*4 <hold foleyperc snares>*2 "
               # n (every 4 (rev) $ "9 11 4 1 11 6 5 0 0 1 12 0 6 2")
               |-| up (every 2 (0.25 <~) $ "9 0 7 4")
                ) ,
             (8,11,  whenmod 7 4 (slow 1.5) $
               whenmod 6 3 (# pan "0") $
               every 6 (trunc (3/8)) $
               slow 2 $ s "vk*8 <bs ps>*8 bbss*1 if*2 "
               # n (every 2 (0.25 <~) $ "9 0 7 4")
               |-| up (every 4 (rev) $ "9 11 4 1 11 6 5 0 0 1 12 0 6 2")
              ) ,
             (12,15,  whenmod 7 4 (slow 1.5) $
               whenmod 6 3 (# pan "0") $
               every 1 (# up "7") $
               every 2 (slow 2) $ s "vk*8 r0*8 <bs ps>*4 snares*8 "
               # n (every 2 (density 4) $ every 2 (density 1.5) $ every 3 (0.25 <~) $ run 11)
               |-| up (every 4 (rev) $ every 4 (0.25 ~>) $ every 1 (rev) $ "4 1 1 10 10 5 4")
                ) ]
                # cut "-1"
                # speed "<1 0.75>"


d1 $ silence

do
   d1 $
      whenmod 5 2 (rev) $
      whenmod 8 6 (0.125 ~>) $
    every 2 (slow 2) $
    stack [
        s "[ugkick:4*<8 4>, ~ ugsnare*<1 2> ]",
        every 4 (slow 2) $ s "bbss*<8 16> " # cut "1 -1"
        -| note "10 [12,14] 16*2 12*3"
        ]
      |+ n (every 2 (rev) $ run 3)

--

xfadeIn 1 8 $
    whenmod 16 14 (# s "~") $
    whenmod 14 12 (superimpose (-| up (every 2 (0.25 <~) $ "9 0 7 4")).(|- cut "<2 3 1>")) $
    whenmod 13 9 (slowspread ($) [ chunk 4 (hurry 2), iter 4, chunk 4 (hurry 2), (#  accelerate "< 0.3 0.4 -1 -2>")]) $
    whenmod 6 4 (# delay "0.3") . (# delaytime "<0.01 0.02 0.0625 0.125>") . (# delayfeedback "0.2 0.8") $
    every 8 (# s "~") $
      seqPLoop [
      (0,15, every 2 (slow 2) $
        stack [
          every 6 (0.125 ~>) $ every 4 (0.25 <~) $ s "brok:3*<1 2 4> [~ <~ brok:3?*<1 2 0>> ]" # shape 0.3 # lpf 1200 ,
          s"[<ps:2 ul el:2>*1 bs:2*2, ~ moto*8 ]" # speed 0.75 |- up (every 4 (rev) $ "9 11 4 1 11 6 5 0 0 1 12 0 6 2") # cut "<1 2 -1>" |+ n (every 3 (0.25 ~>) $ run 11) ,
          slow 2 $ s "layer:3*<2 4 6 8>" |- up (every 2 (0.25 <~) $ "9 0 7 4")
          ]),
      (15,31,whenmod 5 2 (|- up (every 4 (rev) $ "9 11 4 1 11 6 5 0 0 1 12 0 6 2")) $
        stack [
          every 6 (0.125 ~>) $ every 4 (0.25 <~) $ s "brok:3*<1 2 4> [~ <~ brok:3?*<1 2 0>> ]" # shape 0.3 # lpf 1200 ,
          s"[<ps:2 ul el:2>*1 bs:2*2, ~ moto*8 ]" # speed 0.75 |- up (every 4 (rev) $ "9 11 4 1 11 6 5 0 0 1 12 0 6 2") # cut "<1 2 -1>" |+ n (every 3 (0.25 ~>) $ run 11) ,
          slow 2 $ s "layer:3*<2 4 6 8>" |- up (every 2 (0.25 <~) $ "9 0 7 4")
          ])
      ]
    # cut "-1"

do
   d3 $
      whenmod 6 4 (# up "-2") $
      whenmod 8 6 ((# krush "<1.2 0.7 1>").(spread ($)[(|> kcutoff "<1200 2550 4000>>"),(>| kcutoff "<800 2000 3000 6000>")]).(# cut "-1").(stut 4 0.125 0.25)) $
      every 4 (0.25 <~) $
      foldEvery [3,5] ((superimpose (# triode (fast 4 $ range 0.1 0.3 isaw)).(every 2 (# ring (fast 3 $ range 0.1 0.4 tri)).(# ringf (fast 5 $ range 200 500 cosine))))) $
      every 2 (slow 2) $ s " [kicks:2*2 grprc*4, ifdrums*2 bs*4] "
      +| n (every 3 (slow 3) $ run 3)
      # cps 0.9


do
    d1  $

    clutchIn 2 8 $ silence

          d2 $
            whenmod 8 5 (spread ($)[trunc "<0.25 0.5 0.75>", zoom (0.25,0.75),(linger "<0.5 0.25 1>")]).(chunk 4 (hurry 2)).(every 2 (slow 2)) $
            whenmod 5 3 (slowspread ($)[(# octer (range 800 2000 tri)).(# octersub (range 200 400 tri)).(slow 2), ply "<2 3 4>",(trunc (3/8))]) $
            whenmod 5 2 (+| up "-5 5 -5 3") $
            whenmod 6 4 (0.125 <~) $
            seqPLoop [
            (0,6,every 2 (slow 2) $ stack [
              s "[vk*2, tk*2 ul*1]" # shape 0.3 # lpf 1200,
              every 4 (# s "~") $ whenmod 6 4 (# crush (run 16)) $ s "[tc*<8 4 3.5>, <909 tp>*8]" # cut "-1" # speed 0.75 ,
              slow "<2 3 4>" $ s "bbss:2(<3,3.5,6>,8,<0,2,3>)" # cut "2" # up "-7"]
            +| n (every 2 (0.25 <~) $ "0 1 2 4 5 7 9 11")) ,
            (6,7, slow 2 $ s "~"),
            (8,14,every 4 (slow 2) $ stack [
              s "[vk*<2 4>, tk*2 ul*1]" # shape 0.3 # lpf 1200,
              every 4 (# s "~") $ whenmod 6 4 (# triode (range 0.1 0.5 saw)) $ s "[tc*8, <909 tp>*8]" # cut "-1" # speed 0.75 ,
              slow "<2 3 4>" $ s "bbss:2(<3.5,5.5,2>,8,<0,2,3>)" # cut "2" # up "-7"]
            +| n (every 2 (0.25 <~) $ "0 1 2 1 5 4 9 11")),
            (14,15, slow 2 $ s "~") ,
            (16,28,every 4 (slow 2) $
            whenmod 6 4 (slowspread ($)[(fast 2).(# fshiftnote (range 0.1 0.3 cosine)).(# fshift (range 30 2 sine)).(every 2 (slow 2)), (density 2).(# squiz (run 8)), juxBy 0.2(#kcutoff (range 2000 200 tri)).(# krush (run 6)).(spread ($)[(>| cut "<1 2 -1>"), (|> cut "<1 2 -1>")]).(slow 2) , (# triode (range 0.2 0.6 tri)).(every 2 (iter 2))]) $
            stack [
              s "[vk(<2 4 3.5>,8,<0 1 3>), tk*2 ul*1]" # shape 0.3 # lpf 1200,
              foldEvery [4,7] (# s "~") $ whenmod 6 3 (# ring (range 0.3 0.6 cosine)).(# ringf (fast 16 $ range 90 600 tri)) $ s "[tc*8, <909 tp>*8]" # cut "-1" # speed 0.75 ,
              slow "<2 3 4>" $ s "bbss:3(<3.5,5.5,2>,8,<0,2,3>)" # cut "2" # up "-7"]
            +| n (every 4 (0.5 <~) $ "0 1 -2 4 5 2 9 6")),
            (29,31, slow 2 $ s "~")
            ]
